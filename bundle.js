!function(e){var n={};function r(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)r.d(t,a,function(n){return e[n]}.bind(null,a));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/",r(r.s=0)}([function(e,n,r){e.exports=r(1)},function(e,n,r){r(2)(r(3))},function(e,n){e.exports=function(e){function n(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):n("EvalError: No eval function available")}catch(e){n(e)}}},function(e,n){e.exports="// Input fields\r\nconst firstName = document.getElementById('firstName');\r\nconst lastName = document.getElementById('lastName');\r\nconst password = document.getElementById('password');\r\nconst confirmPassword = document.getElementById('confirmPassword');\r\nconst email = document.getElementById('email');\r\n\r\n// Form\r\nconst form = document.getElementById('myForm');\r\n\r\n// Validation colors\r\nconst green = '#4CAF50';\r\nconst red = '#F44336';\r\n\r\n// Handle form submission\r\nform.addEventListener('submit', event => {\r\n  // prevent default behaviour\r\n  event.preventDefault();\r\n\r\n  if (\r\n    validateFirstName() &&\r\n    validateLastName() &&\r\n    validatePassword() &&\r\n    validateConfirmPassword() &&\r\n    validateEmail()\r\n  ) {\r\n      const name = firstName.value;\r\n      const container = document.querySelector('div.container');\r\n      const loader = document.createElement('div');\r\n      loader.className = 'progress';\r\n      const loadingBar = document.createElement('div');\r\n      loadingBar.className = 'indeterminate';\r\n      loader.appendChild(loadingBar);\r\n      container.appendChild(loader);\r\n\r\n      setTimeout(() => {\r\n          const loaderDiv = document.querySelector('div.progress');\r\n          const panel = document.createElement('div');\r\n          panel.className = 'card-panel green';\r\n          const text = document.createElement('span');\r\n          text.className = 'white-text';\r\n          text.appendChild(document.createTextNode(`Sign up successful, welcome to Greener Pastures ${name}! `));\r\n          panel.appendChild(text);\r\n          container.replaceChild(panel, loaderDiv);\r\n      }, 1000)\r\n  }\r\n});\r\n\r\n// Validator functions\r\nfunction validateFirstName() {\r\n  // Check if field is empty\r\n  if (checkIfEmpty(firstName)) return;\r\n\r\n  // Check if only letters\r\n  if (!checkIfOnlyLetters(firstName)) return;\r\n  return true;\r\n}\r\n\r\nfunction validateLastName() {\r\n  // Check if field is empty\r\n  if (checkIfEmpty(lastName)) return;\r\n\r\n  // Check if only letters\r\n  if (!checkIfOnlyLetters(lastName)) return;\r\n  return true;\r\n}\r\n\r\nfunction validatePassword() {\r\n  // Check if field empty\r\n  if (checkIfEmpty(password)) return;\r\n\r\n  // Check password length\r\n  if (!meetLength(password, 4, 100)) return;\r\n\r\n  // Check password against character set\r\n  if (!containsCharacters(password, 4)) return;\r\n  return true;\r\n}\r\n\r\nfunction validateConfirmPassword() {\r\n  if (password.className !== 'valid') {\r\n    setInvalid(confirmPassword, `Password must be valid.`);\r\n    return;\r\n  }\r\n\r\n  // check if identical\r\n  if (password.value !== confirmPassword.value) {\r\n    setInvalid(confirmPassword, 'Passwords must match.');\r\n    return;\r\n  } else {\r\n    setValid(confirmPassword);\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction validateEmail() {\r\n  if (checkIfEmpty(email)) return;\r\n  if (!containsCharacters(email, 5)) return;\r\n  return true;\r\n}\r\n\r\n/* Utility functions */\r\n\r\nfunction checkIfEmpty(field) {\r\n  if (isEmpty(field.value.trim())) {\r\n    //set field invalid\r\n    setInvalid(field, `${field.name} must not be empty.`);\r\n    return true;\r\n  } else {\r\n    //set field valid, return false\r\n    setValid(field);\r\n    return false;\r\n  }\r\n}\r\n\r\n// checks if field is empty\r\nfunction isEmpty(value) {\r\n  if (value === '') return true;\r\n  return false;\r\n}\r\n\r\n// sets field to invalid\r\nfunction setInvalid(field, message) {\r\n  field.className = 'invalid';\r\n  field.nextElementSibling.innerHTML = message;\r\n  field.nextElementSibling.style.color = red;\r\n}\r\n\r\n// sets field to valid\r\nfunction setValid(field) {\r\n  field.className = 'valid';\r\n  field.nextElementSibling.innerHTML = '';\r\n  field.nextElementSibling.style.color = green;\r\n}\r\n\r\n// checks if only letters pass into field\r\nfunction checkIfOnlyLetters(field) {\r\n  if (/^[a-zA-Z ]+$/.test(field.value)) {\r\n    setValid(field);\r\n    return true;\r\n  } else {\r\n    setInvalid(field, `${field.name} must contain only letters.`);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Checks if field param is between min-max length\r\nfunction meetLength(field, minLength, maxLength) {\r\n  if (field.value.length >= minLength && field.value.length < maxLength) {\r\n    setValid(field);\r\n    return true;\r\n  } else if (field.value.length < minLength) {\r\n    setInvalid(\r\n      field,\r\n      `${field.name} must be at least ${minLength} characters long.`\r\n    );\r\n    return false;\r\n  } else {\r\n    setInvalid(\r\n      field,\r\n      `${field.name} must be shorter than ${maxLength} characters.`\r\n    );\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction containsCharacters(field, code) {\r\n  let regEx;\r\n\r\n  switch (code) {\r\n    case 1:\r\n      // only letters\r\n      regEx = /(?=.*[a-zA-Z])/;\r\n      return matchWithRegEx(\r\n        regEx,\r\n        field,\r\n        `${field.name} must contain at least one letter.`\r\n      );\r\n    case 2:\r\n      // At least one letter and one number\r\n      regEx = /(?=.*\\d)(?=.*[a-zA-Z])/;\r\n      return matchWithRegEx(\r\n        regEx,\r\n        field,\r\n        `${field.name} must contain at least one letter and one number.`\r\n      );\r\n    case 3:\r\n      // uppercase, lowercase and number\r\n      regEx = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])/;\r\n      return matchWithRegEx(\r\n        regEx,\r\n        field,\r\n        `${field.name} must contain at least one upper case, one lower case and a number.`\r\n      );\r\n    case 4:\r\n      // upper case, lower case, number and special character\r\n      regEx = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)/;\r\n      return matchWithRegEx(\r\n        regEx,\r\n        field,\r\n        `${field.name} must contain at least one upper case, one lower case, one number and a special character.`\r\n      );\r\n    // email regex\r\n    case 5:\r\n      regEx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n      return matchWithRegEx(regEx, field, `${field.name} not valid.`);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction matchWithRegEx(regEx, field, message) {\r\n  if (field.value.match(regEx)) {\r\n    setValid(field);\r\n    return true;\r\n  } else {\r\n    setInvalid(field, message);\r\n    return false;\r\n  }\r\n}\r\n"}]);